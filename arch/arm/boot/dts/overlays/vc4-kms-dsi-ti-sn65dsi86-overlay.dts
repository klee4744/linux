/*
 * vc4-kms-dsi-sn65dsi8x-overlay.dts
 */

/dts-v1/;
/plugin/;
#include <dt-bindings/gpio/gpio.h>

/ {
	compatible = "brcm,bcm2835";
	fragment@0 {
		target-path = "/";
		__overlay__ {
			regulators {
				compatible = "simple-bus";
				#address-cells = <1>;
				#size-cells = <0>;

				reg_1v8: reg_1v8 {
					compatible = "regulator-fixed";
					regulator-name = "1V8";
					regulator-min-microvolt = <1800000>;
					regulator-max-microvolt = <1800000>;
					regulator-always-on;
				};

				reg_1v2: reg_1v2 {
					compatible = "regulator-fixed";
					regulator-name = "1V2";
					regulator-min-microvolt = <1200000>;
					regulator-max-microvolt = <1200000>;
					regulator-always-on;
				};

				sn65dsi86_refclk: sn65dsi86_refclk {
					compatible = "fixed-clock";
					#clock-cells = <0>;
					clock-frequency = <27000000>;
				};
			};
		};
	};

	fragment@1 {
		target-path = "/";
		__overlay__ {
			//#gpio-cells = <2>;
			status = "okay";

			panel: panel {
				//compatible = "dell,p2414h", "simple-panel";
				compatible = "orient,afv19201080a0", "simple-panel";

				port {
					panel_in_edp: endpoint {
						remote-endpoint = <&bridge_out>;
					};
				};
			};
		};
	};

	fragment@2 {
		target = <&i2c_csi_dsi>;
		__overlay__ {
			#gpio-cells = <2>;
			#address-cells = <1>;
			#size-cells = <0>;
			status = "okay";

			bridge@2c {
				compatible = "ti,sn65dsi86";
				reg = <0x2c>;
        
				enable-gpios = <&gpio 4 0>;
				
				vccio-supply = <&reg_1v8>;
				vcca-supply = <&reg_1v2>;
				vpll-supply = <&reg_1v8>;
				vcc-supply = <&reg_1v2>;
				
				clock-names = "refclk";
				clocks = <&sn65dsi86_refclk>;

				ports {
					#address-cells = <1>;
					#size-cells = <0>;

					port@0 {
						reg = <0>;
						bridge_in: endpoint {
							remote-endpoint = <&dsi_out_port>;
						};
					};

					port@1 {
						reg = <1>;
						bridge_out: endpoint {
							//data-lanes = <0 1 2 3>;
							data-lanes = <0 1 2>;
							remote-endpoint = <&panel_in_edp>;
						};
					};
				};
			};
		};
	};

	fragment@5 {
		target = <&dsi1>;
		__overlay__ {
			#address-cells = <1>;
			#size-cells = <0>;
			status = "okay";
			port {
				dsi_out_port: endpoint {
					remote-endpoint = <&bridge_in>;
					data-lanes = <0 1 2>;
				};
			};
		};
	};

	fragment@6 {
		target = <&i2c0if>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@7 {
		target = <&i2c0mux>;
		__overlay__ {
			status = "okay";
		};
	};
};
